Brute force search mod 1000000000
For 1 digits, sumofn = 45
For 2 digits, sumofn = 726
For 3 digits, sumofn = 28083
For 4 digits, sumofn = 1719828
For 5 digits, sumofn = 161887270
For 6 digits, sumofn = 608872280
For 7 digits, sumofn = 587599519
For 8 digits, sumofn = 709355474
For 9 digits, sumofn = 205478039
For 10 digits, sumofn = 538607937

real	2m38.943s
user	2m38.931s
sys	0m0.004s
-------------------------------------
git@github.com:voyager23/Problem_171.git

	// -----sanity check-----
	left.clear();
	right.clear();
	if(digits > 19) return;
	//-------------------------
	
	int nl = digits/2;
	int nr = nl + digits % 2;	// length >= nl;
	// construct the (longest) map right;
	unsigned limit = std::pow(10, nr);
	for(auto m = 1; m < limit; ++m){
		// find sum of squares of digits of m
		unsigned sum = 0;
		unsigned copy = m;
		while(copy){
			sum += (copy % 10)*(copy % 10);
			copy /= 10;
		}
		// insert or update map
		auto result = right.insert(std::make_pair(sum,1));
		if((result.second)==false) result.first->second += 1;
	}
	// insert a (subset) of elements from right to left
	limit = std::pow(10,nl);
	for(auto idx = 0; idx < limit; ++idx) 
		left.insert(std::make_pair(idx, right[idx]));
}
